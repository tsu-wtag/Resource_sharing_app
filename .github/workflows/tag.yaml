# name: Create Incremental Stage Tag and Push to GCR

# on:
#   push:
#     branches:
#       - develop  # Trigger the workflow when changes are pushed to the 'develop' branch

# env:
#   GKE_CLUSTER: staging-v3
#   GKE_PROJECT: nodal-algebra-161404
#   GKE_ZONE: us-west1-a
#   IMAGE_NAME: welldev-nlp

# jobs:
#   # if: ${{ github.event.pull_request.merged == true }}
#   create-release-and-push:
#     runs-on: ubuntu-latest

#     steps:
#       # Checkout the repository code
#       - uses: actions/checkout@v3

#       # Fetch all tags
#       - name: Fetch all tags
#         run: git fetch --tags

#       # Determine the new tag based on the previous tag logic (v1-stage, v2-stage, etc.)
#       - name: Determine New Tag
#         id: new_tag
#         run: |
#           # Get the latest tag in the format 'v*-stage'
#           latest_stage_tag=$(git tag --sort=-v:refname | grep -E '^v[0-9]+-stage$' | head -n 1)

#           # Extract the version number from the tag and increment it
#           if [ -n "$latest_stage_tag" ]; then
#             echo "Latest -stage tag: $latest_stage_tag"
#             version=$(echo $latest_stage_tag | sed 's/v\([0-9]*\)-stage/\1/')
#             new_version=$((version + 1))
#             new_tag="v${new_version}-stage"
#           else
#             # If no previous -stage tag is found, find the latest tag without the suffix
#             latest_non_stage_tag=$(git tag --sort=-v:refname | grep -E '^v[0-9]+$' | head -n 1)
            
#             if [ -n "$latest_non_stage_tag" ]; then
#               echo "Latest non-stage tag: $latest_non_stage_tag"
#               version=$(echo $latest_non_stage_tag | sed 's/v\([0-9]*\)/\1/')
#               new_version=$((version + 1))
#               new_tag="v${new_version}-stage"
#             else
#               # If no previous tags exist, start at v1-stage
#               echo "No previous tags found, starting at v1-stage"
#               new_tag="v1-stage"
#             fi
#           fi

#           echo "New tag: $new_tag"
#           echo "::set-output name=new_tag::$new_tag"

#       # Create the new tag and push it to the repository
#       - name: Create New Tag
#         run: |
#           git config user.name "GitHub Actions"
#           git config user.email "actions@github.com"
#           git tag ${{ steps.new_tag.outputs.new_tag }}
#           git push origin ${{ steps.new_tag.outputs.new_tag }}

#       # # Authenticate to Google Cloud
#       # - name: Authenticate to Google Cloud
#       #   uses: google-github-actions/auth@v2
#       #   with:
#       #     credentials_json: '${{ secrets.GCLOUD_SERVICE_KEY }}'  # Google Cloud service account key

#       # # Configure Docker to use gcloud as a credential helper
#       # - name: Configure Docker for GCR
#       #   run: |
#       #     gcloud auth configure-docker

#       # # Build Docker image and tag it with the new release tag (e.g., v1-stage)
#       # - name: Build Docker Image
#       #   run: |
#       #     docker build -t gcr.io/YOUR_PROJECT_ID/YOUR_IMAGE_NAME:${{ steps.new_tag.outputs.new_tag }} .

#       # # Push the Docker image to GCR
#       # - name: Push Docker Image to GCR
#       #   run: |
#       #     docker push gcr.io/YOUR_PROJECT_ID/YOUR_IMAGE_NAME:${{ steps.new_tag.outputs.new_tag }}
