# name: Staging Build and Push Docker Images

# on:
#   push:
#     branches:
#       #- 'master'
#       #- 'OPS-2140-Docker-image-build'

# env:
#   GKE_CLUSTER: staging-v3
#   GKE_PROJECT: nodal-algebra-161404
#   GKE_ZONE: us-west1-a
#   IMAGE_NAME: welldev-nlp

# jobs:
#   #if: ${{ github.event.pull_request.merged == true }}
#   create-release:
#     name: Create Release for Tags
#     runs-on: self-hosted



#     steps:
#       - name: Checkout code
#         uses: actions/checkout@v4

#       - name: Fetch Tags
#         run: git fetch --tags --force

#       - name: Get Latest Tag
#         id: get_latest_tag
#         run: |
#           # Get the latest tag that starts with "v"
#           latest_tag=$(git tag --list 'v*' | sort -V | tail -n 1)
          
#           # Get the latest tag that ends with "-stage"
#           latest_stage_tag=$(git tag --list '*-stage' | sort -V | tail -n 1)
          
#           # If a "-stage" tag is found, use it for the new tag calculation
#           if [ -n "$latest_stage_tag" ]; then
#             echo "Latest '-stage' tag: $latest_stage_tag"
            
#             # Extract the numeric part of the stage tag and increment it
#             stage_tag_number=${latest_stage_tag//[!0-9]/} # Remove non-numeric characters
#             new_stage_number=$((stage_tag_number + 1))
#             new_tag="v${new_stage_number}-stage"
          
#           # If no "-stage" tag is found, increment the latest non-suffix tag
#           elif [ -n "$latest_tag" ]; then
#             echo "Latest non-suffix tag: $latest_tag"
            
#             # Extract the numeric part of the tag and increment it
#             tag_number=${latest_tag//[!0-9]/} # Remove non-numeric characters
#             new_number=$((tag_number + 1))
#             new_tag="v$new_number"
          
#           # If no tag is found at all, set the initial version
#           else
#             new_tag="v1"
#           fi
        
#           echo "New tag: $new_tag"
#           echo "new_tag=$new_tag" >> $GITHUB_ENV


#       - name: Create Release
#         id: create_release
#         uses: actions/create-release@v1
#         env:
#           GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # Token for authentication
#         with:
#           tag_name: ${{ env.new_tag }}  # Use the new incremented tag
#           release_name: ${{ env.new_tag }}-stage  # Title of the release
#           draft: false
#           prerelease: false

#   build-and-push-images:
#     name: Docker Build and Push Images
#     runs-on: self-hosted
#     needs: create-release  # Ensure this job runs after the release is created


#     env:
#       IMAGE_TAG: ${{ github.ref_name }}-stage
#       # GCP_SA: ${{ secrets.GCP_SA }}
#       VITE_APP_ENV: "staging"
#       VITE_APP_NAME: "welldev-nlp"
#       VITE_APP_DOMAIN: "https://nlp.preview.welltravel.com"
   

#     steps:
#       - name: Checkout
#         uses: actions/checkout@v4

#       # - name: Authenticate with Google Cloud
#       #   uses: google-github-actions/auth@v0.7.3
#       #   with:
#       #     credentials_json: ${{ secrets.GKE_SERVICE_ACCOUNT }}
#       #     project_id: ${{ env.GKE_PROJECT }}

#       # - name: Build and Push Frontend Docker Image to GCR
#       #   run: |
#       #     cd ./frontend
#       #     docker build -f Dockerfile \
#       #       -t eu.gcr.io/${GKE_PROJECT}/${IMAGE_NAME}-frontend:${IMAGE_TAG} \

#       #       --build-arg VITE_APP_ENV=${VITE_APP_ENV} \     
#       #       --build-arg VITE_APP_NAME=${VITE_APP_NAME} \     
#       #       --build-arg VITE_APP_DOMAIN=${VITE_APP_DOMAIN} \   
#       #       .
#       #     # docker push eu.gcr.io/${GKE_PROJECT}/${IMAGE_NAME}-frontend:${IMAGE_TAG}
#       #     # docker push eu.gcr.io/${GKE_PROJECT}/${IMAGE_NAME}-frontend:build-cache

#       # - name: Disable Docker Content Trust (Temporary)
#       #   run: export DOCKER_CONTENT_TRUST=0
        
#       - name: Build and Push Backend Docker Image
#         run: |
#           cd ./backend
#           docker build -f Dockerfile -t eu.gcr.io/${GKE_PROJECT}/${IMAGE_NAME}-backend:${IMAGE_TAG} .
#           # docker push eu.gcr.io/${GKE_PROJECT}/${IMAGE_NAME}-backend:${IMAGE_TAG}
      


#       - name: Build and Push Celery Worker Docker Image
#         run: |
#           cd ./backend
#           docker build -f celeryworker.dockerfile -t eu.gcr.io/${GKE_PROJECT}/${IMAGE_NAME}-celeryworker:${IMAGE_TAG} .
#           # docker push eu.gcr.io/${GKE_PROJECT}/${IMAGE_NAME}-celeryworker:${IMAGE_TAG}

#       - name: Confirm Image Builds and Pushes
#         run: echo "All Docker images have been built and pushed successfully."
